import argparse
import logging
import sys
from typing import Optional
from core.database import DatabaseManager, engine
import subprocess
from core.models import LegalDocument, LegalQA, Judgment, Base, CrawlTracker, ProcessTracker, ProcessedArticle
from datetime import datetime

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('legal_crawler.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def handle_migrations(command: str):
    """X·ª≠ l√Ω c√°c l·ªánh migration b·∫±ng Alembic v·ªõi logging chi ti·∫øt"""
    try:
        logger.info(f"Executing migration command: alembic {command}")
        
        result = subprocess.run(
            ['alembic'] + command.split(),
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Ghi log chi ti·∫øt
        if result.stdout:
            logger.info("Migration output:\n" + result.stdout)
        if result.stderr:
            logger.debug("Migration debug info:\n" + result.stderr)
            
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Migration failed with error code {e.returncode}")
        logger.error(f"Error details:\n{e.stderr}")
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(
        description='Legal Database Management System',
        formatter_class=argparse.RawTextHelpFormatter
    )
    
    subparsers = parser.add_subparsers(
        title='subcommands',
        description='valid commands',
        dest='command',
        metavar='COMMAND'
    )

    # L·ªánh kh·ªüi t·∫°o database
    init_parser = subparsers.add_parser(
        'initdb',
        help='Kh·ªüi t·∫°o c·∫•u tr√∫c database (D√πng Alembic migration)'
    )
    
    # L·ªánh th√™m d·ªØ li·ªáu m·∫´u
    sample_parser = subparsers.add_parser(
        'adddata',
        help='Th√™m d·ªØ li·ªáu m·∫´u v√†o database'
    )
    
    # L·ªánh x√≥a database
    clear_parser = subparsers.add_parser(
        'cleardb',
        help='‚ö†Ô∏è X√≥a to√†n b·ªô d·ªØ li·ªáu v√† c·∫•u tr√∫c (Ch·ªâ d√πng cho m√¥i tr∆∞·ªùng ph√°t tri·ªÉn)'
    )
    
    # L·ªánh import/export
    io_parser = subparsers.add_parser(
        'io',
        help='Thao t√°c import/export d·ªØ li·ªáu',
        description='Th·ª±c hi·ªán c√°c thao t√°c import/export d·ªØ li·ªáu'
    )
    io_parser.add_argument(
        'action',
        choices=['import', 'export'],
        help='Lo·∫°i thao t√°c (import/export)'
    )
    # Th√™m t√πy ch·ªçn m·ªõi cho initdb
    init_parser.add_argument(
        '--table',
        help='Ch·ªâ t·∫°o b·∫£ng c·ª• th·ªÉ (D√πng cho dev)'
    )
    init_parser.add_argument(
        '--safe',
        action='store_true',
        help='Ch·∫ø ƒë·ªô an to√†n - ch·ªâ d√πng Alembic migration'
    )
    io_parser.add_argument(
        '--file',
        required=True,
        help='ƒê∆∞·ªùng d·∫´n file d·ªØ li·ªáu'
    )

    # L·ªánh migration
    migrate_parser = subparsers.add_parser(
        'migrate',
        help='Qu·∫£n l√Ω database migration',
        description='Th·ª±c hi·ªán c√°c thao t√°c migration v·ªõi Alembic'
    )
    migrate_parser.add_argument(
        'action',
        nargs='?',
        default='upgrade',
        choices=['upgrade', 'downgrade'],
        help='H√†nh ƒë·ªông migration (m·∫∑c ƒë·ªãnh: upgrade)'
    )
    migrate_parser.add_argument(
        'revision',
        nargs='?',
        default='head',
        help='Phi√™n b·∫£n migration ƒë√≠ch (m·∫∑c ƒë·ªãnh: head)'
    )

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        sys.exit(1)

    try:
        # X·ª≠ l√Ω c√°c l·ªánh migration
        if args.command == 'migrate':
            if args.action == 'upgrade':
                handle_migrations(f'upgrade {args.revision}')
            elif args.action == 'downgrade':
                handle_migrations(f'downgrade {args.revision}')
                
        # X·ª≠ l√Ω c√°c l·ªánh kh√°c
        else:
            with DatabaseManager() as db:
                if args.command == 'initdb':
                    if args.safe:
                        logger.info("üöÄ Kh·ªüi t·∫°o database an to√†n b·∫±ng Alembic...")
                        handle_migrations("upgrade head")
                    elif args.table:
                        logger.info(f"üõ† T·∫°o b·∫£ng {args.table} (ch·∫ø ƒë·ªô dev)...")
                        try:
                            # Dynamic table creation
                            table_class = globals().get(args.table)
                            if not table_class:
                                raise ValueError(f"Kh√¥ng t√¨m th·∫•y model {args.table}")
                            
                            table_class.__table__.create(bind=engine, checkfirst=True)
                            logger.info(f"‚úÖ ƒê√£ t·∫°o b·∫£ng {args.table}")
                        except Exception as e:
                            logger.error(f"‚ùå L·ªói khi t·∫°o b·∫£ng: {str(e)}")
                            sys.exit(1)
                    else:
                        logger.warning("‚ö†Ô∏è Ch·∫ø ƒë·ªô initdb m·∫∑c ƒë·ªãnh ch·ªâ d√†nh cho dev!")
                        confirm = input("B·∫°n c√≥ ch·∫Øc mu·ªën t·∫°o to√†n b·ªô tables? (yes/no): ")
                        if confirm.lower() == 'yes':
                            Base.metadata.create_all(bind=engine)
                            logger.info("‚úÖ ƒê√£ t·∫°o t·∫•t c·∫£ b·∫£ng")
                        else:
                            logger.info("H·ªßy thao t√°c")
                    
                elif args.command == 'adddata':
                    # Th√™m d·ªØ li·ªáu m·∫´u s·ª≠ d·ª•ng ORM
                    from core.models import LegalDocument, LegalQA, Judgment
                    from datetime import datetime
                    
                    try:
                        with DatabaseManager() as session:
                            # Th√™m vƒÉn b·∫£n lu·∫≠t
                            doc = LegalDocument(
                                document_number="174/Qƒê-BVHTTDL",
                                document_type="Quy·∫øt ƒë·ªãnh",
                                issuing_authority="B·ªô VƒÉn ho√°, Th·ªÉ thao v√† du l·ªãch",
                                signer="T·∫° Quang ƒê√¥ng",
                                issue_date=datetime(2025, 1, 21).date(),
                                effective_date="ƒê√£ bi·∫øt",
                                content_html="<html>N·ªôi dung m·∫´u vƒÉn b·∫£n...</html>"
                            )
                            session.add(doc)
                            
                            # Th√™m QA
                            qa = LegalQA(
                                question_html="<p>C√¢u h·ªèi m·∫´u v·ªÅ lu·∫≠t du l·ªãch?</p>",
                                answer_html="<div>Tr·∫£ l·ªùi m·∫´u...</div>",
                                category="Lu·∫≠t D√¢n s·ª±",
                                author="Nguy·ªÖn VƒÉn A",
                                tags=["du l·ªãch", "h√†nh ch√≠nh"],
                                related_documents=[1]
                            )
                            session.add(qa)
                            
                            # Th√™m b·∫£n √°n
                            judgment = Judgment(
                                case_name="V·ª• √°n tranh ch·∫•p h·ª£p ƒë·ªìng x√¢y d·ª±ng",
                                case_number="26/2024/KDTM-GƒêT",
                                issuing_authority="T√≤a √°n nh√¢n d√¢n c·∫•p cao",
                                trial_level="Gi√°m ƒë·ªëc th·∫©m",
                                field="Kinh t·∫ø",
                                judgment_date=datetime(2024, 9, 26).date(),
                                keywords=["h·ª£p ƒë·ªìng x√¢y d·ª±ng", "tranh ch·∫•p"],
                                content_html="<html>N·ªôi dung b·∫£n √°n...</html>",
                                content_text="N·ªôi dung vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch...",
                                related_parties={
                                    "nguyen_don": "C√¥ng ty A",
                                    "bi_don": "C√¥ng ty B"
                                }
                            )
                            session.add(judgment)
                            
                            session.commit()
                            logger.info("Sample data inserted successfully")
                            
                    except Exception as e:
                        logger.error(f"Failed to insert sample data: {str(e)}")
                        sys.exit(1)
                    
                elif args.command == 'cleardb':
                    confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu? (yes/no): ")
                    if confirm.lower() == 'yes':
                        Base.metadata.drop_all(bind=engine)
                        logger.warning("Database cleared successfully")
                    else:
                        logger.info("H·ªßy thao t√°c x√≥a database")
                        
                elif args.command == 'io':
                    if args.action == 'export':
                        db.export_data(args.table, args.file)
                    else:
                        db.import_data(args.table, args.file)

    except Exception as e:
        logger.error(f"Operation failed: {str(e)}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    main()